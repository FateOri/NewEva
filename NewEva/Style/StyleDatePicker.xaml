<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:NewEva.Converters"
    xmlns:wpf="clr-namespace:NewEva.StyleHelper">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="StyleCalendar.xaml" />
        <ResourceDictionary Source="StyleValidationErrorTemplate.xaml" />
        <ResourceDictionary Source="StyleMenu.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:TextFieldHintVisibilityConverter x:Key="TextFieldHintVisibilityConverter" />
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:MathConverter x:Key="DivisionMathConverter" Operation="Divide" />
    <converters:TextFieldClearButtonVisibilityConverter x:Key="ClearTextConverter" />
    <converters:NotConverter x:Key="NotConverter" />
    <converters:FontToLineHeightConverter x:Key="FontToLineHeightConverter" />
    <converters:MathConverter x:Key="MathMultiplyConverter" Operation="Multiply" />
    <converters:FloatingHintOffsetCalculationConverter x:Key="FloatingHintOffsetCalculationConverter" />
    <converters:PickerInnerPaddingConverter x:Key="PickerInnerPaddingConverter" />

    <Style x:Key="MaterialDesignDatePickerTextBox" TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMargin}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Padding" Value="{x:Static wpf:Constants.TextBoxDefaultPadding}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource StyleValidationErrorTemplate}" />
        <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="ContextMenu" Value="{StaticResource MaterialDesignDefaultContextMenu}" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="WatermarkBrush" Color="{TemplateBinding Foreground}" />
                        </Grid.Resources>
                        <Border
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}"
                            CornerRadius="{TemplateBinding wpf:TextFieldAssist.TextFieldCornerRadius}"
                            RenderTransformOrigin="0.5,0.5"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.RippleOnFocusEnabled,
                                                         Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
                            </Border.RenderTransform>
                        </Border>
                        <AdornerDecorator>
                            <Border
                                x:Name="border"
                                Padding="{TemplateBinding Padding}"
                                wpf:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}"
                                wpf:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding wpf:TextFieldAssist.TextFieldCornerRadius}"
                                SnapsToDevicePixels="True">
                                <Grid
                                    x:Name="grid"
                                    MinWidth="1"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock
                                        x:Name="PrefixTextBlock"
                                        Grid.Column="0"
                                        FontSize="{TemplateBinding FontSize}"
                                        Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                        Text="{TemplateBinding wpf:TextFieldAssist.PrefixText}" />
                                    <ContentControl
                                        x:Name="PART_Watermark"
                                        Grid.Column="1"
                                        Focusable="False"
                                        IsHitTestVisible="False"
                                        Opacity="0"
                                        Visibility="Collapsed" />
                                    <ScrollViewer
                                        x:Name="PART_ContentHost"
                                        Grid.Column="1"
                                        Panel.ZIndex="1"
                                        wpf:ScrollViewerAssist.IgnorePadding="True"
                                        Focusable="false"
                                        HorizontalScrollBarVisibility="Hidden"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                        VerticalScrollBarVisibility="Hidden" />
                                    <wpf:SmartHint
                                        x:Name="Hint"
                                        Grid.Column="1"
                                        Margin="{TemplateBinding wpf:TextFieldAssist.TextBoxViewMargin}"
                                        FloatingOffset="{TemplateBinding wpf:HintAssist.FloatingOffset}"
                                        FloatingScale="{TemplateBinding wpf:HintAssist.FloatingScale}"
                                        FontFamily="{TemplateBinding wpf:HintAssist.FontFamily}"
                                        FontSize="{TemplateBinding FontSize}"
                                        HintOpacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                        HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                                        UseFloating="{TemplateBinding wpf:HintAssist.IsFloating}">
                                        <wpf:SmartHint.Hint>
                                            <Border
                                                x:Name="HintBackgroundBorder"
                                                Background="{TemplateBinding wpf:HintAssist.Background}"
                                                CornerRadius="2">
                                                <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding wpf:HintAssist.Hint}" />
                                            </Border>
                                        </wpf:SmartHint.Hint>
                                    </wpf:SmartHint>
                                    <StackPanel Grid.Column="2" Orientation="Horizontal">
                                        <TextBlock
                                            x:Name="SuffixTextBlock"
                                            FontSize="{TemplateBinding FontSize}"
                                            Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                            Text="{TemplateBinding wpf:TextFieldAssist.SuffixText}" />
                                        <Button
                                            x:Name="PART_ClearButton"
                                            Padding="2,0,0,0"
                                            Focusable="False"
                                            Style="{DynamicResource MaterialDesignToolButton}">
                                            <Button.Visibility>
                                                <MultiBinding Converter="{StaticResource ClearTextConverter}">
                                                    <Binding
                                                        Converter="{StaticResource NotConverter}"
                                                        ElementName="Hint"
                                                        Path="IsContentNullOrEmpty" />
                                                    <Binding Path="(wpf:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                                                </MultiBinding>
                                            </Button.Visibility>
                                            <Button.Height>
                                                <MultiBinding Converter="{StaticResource FontToLineHeightConverter}">
                                                    <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                                                    <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                                </MultiBinding>
                                            </Button.Height>
                                            <wpf:PackIcon Margin="0" Kind="CloseCircle" />
                                        </Button>
                                    </StackPanel>
                                </Grid>
                            </Border>
                        </AdornerDecorator>
                        <Border
                            x:Name="borderUnderline"
                            Height="0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Bottom"
                            Background="{TemplateBinding BorderBrush}"
                            CornerRadius="{TemplateBinding wpf:TextFieldAssist.UnderlineCornerRadius}"
                            SnapsToDevicePixels="True"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.DecorationVisibility}" />
                        <wpf:Underline
                            x:Name="Underline"
                            Background="{TemplateBinding wpf:TextFieldAssist.UnderlineBrush}"
                            CornerRadius="{TemplateBinding wpf:TextFieldAssist.UnderlineCornerRadius}"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.DecorationVisibility}" />
                        <Canvas VerticalAlignment="Bottom">
                            <TextBlock
                                Canvas.Top="2"
                                MaxWidth="{Binding ActualWidth, ElementName=border}"
                                FontSize="10"
                                Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                Text="{TemplateBinding wpf:HintAssist.HelperText}" />
                        </Canvas>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked" />
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="PART_Watermark"
                                            Storyboard.TargetProperty="Opacity"
                                            To=".23"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleX"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleY"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            BeginTime="0:0:0.45"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            BeginTime="0:0:0.45"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="FloatingOffset">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                        <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="grid" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                        <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
                            <Setter Property="Padding" Value="16,8" />
                            <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}" />
                        </Trigger>
                        <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True">
                            <Setter Property="VerticalContentAlignment" Value="Top" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaBorder}" />
                            <Setter Property="Padding" Value="16" />
                            <Setter TargetName="Underline" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                            <Setter TargetName="HintWrapper" Property="Opacity" Value="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="FloatingOffset">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                        <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HintBackgroundBorder" Property="Padding" Value="4,0" />
                            <Setter Property="wpf:HintAssist.Background" Value="{DynamicResource MaterialDesignPaper}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HintWrapper" Property="Opacity" Value="1" />
                        </MultiTrigger>

                        <!--  IsEnabled  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="grid" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="border" Property="wpf:BottomDashedLineAdorner.IsAttached" Value="True" />
                            <Setter TargetName="borderUnderline" Property="Height" Value="0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="borderUnderline" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="borderUnderline" Property="Height" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                            <Setter TargetName="PrefixTextBlock" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="PART_ContentHost" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="SuffixTextBlock" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="PART_ClearButton" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="HintWrapper" Property="Opacity">
                                <Setter.Value>
                                    <Binding
                                        Converter="{StaticResource MathMultiplyConverter}"
                                        ConverterParameter="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"
                                        Path="(wpf:HintAssist.HintOpacity)"
                                        RelativeSource="{RelativeSource TemplatedParent}" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <!--  IsKeyboardFocused  -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Underline" Property="IsActive" Value="True" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderUnderline" Property="Height" Value="2" />
                        </MultiTrigger>

                        <!--  IsMouseOver  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="BorderThickness" Value="0,0,0,2" />
                            <Setter TargetName="border" Property="Padding" Value="0,4,0,3" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
                            <Setter TargetName="borderUnderline" Property="Height" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                        </MultiTrigger>

                        <!--  Validation.HasError  -->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                            <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Validation.HasError" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignDatePickerCalendarPortrait" TargetType="{x:Type Calendar}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="CalendarDayButtonStyle" Value="{StaticResource MaterialDesignCalendarDayButton}" />
        <Setter Property="CalendarButtonStyle" Value="{StaticResource MaterialDesignCalendarButton}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                        <Border Padding="16,8,16,24" Effect="{DynamicResource MaterialDesignShadowDepth4}">
                            <CalendarItem
                                x:Name="PART_CalendarItem"
                                wpf:CalendarAssist.IsHeaderVisible="{TemplateBinding wpf:CalendarAssist.IsHeaderVisible}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Style="{DynamicResource MaterialDesignCalendarItemPortrait}" />
                        </Border>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignDatePicker" TargetType="{x:Type DatePicker}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="CalendarStyle" Value="{StaticResource MaterialDesignDatePickerCalendarPortrait}" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="{x:Static wpf:Constants.TextBoxDefaultPadding}" />
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMargin}" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource StyleValidationErrorTemplate}" />
        <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="CalendarButtonTemplate" TargetType="{x:Type Button}">
                            <wpf:PackIcon
                                VerticalAlignment="Center"
                                Background="Transparent"
                                Foreground="{TemplateBinding Foreground}"
                                Kind="Calendar" />
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <DatePickerTextBox
                            x:Name="PART_TextBox"
                            Grid.Row="0"
                            Grid.Column="0"
                            HorizontalAlignment="Stretch"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="Center"
                            wpf:HintAssist.FloatingOffset="{TemplateBinding wpf:HintAssist.FloatingOffset}"
                            wpf:HintAssist.FloatingScale="{TemplateBinding wpf:HintAssist.FloatingScale}"
                            wpf:HintAssist.Foreground="{TemplateBinding wpf:HintAssist.Foreground}"
                            wpf:HintAssist.HelperText="{TemplateBinding wpf:HintAssist.HelperText}"
                            wpf:HintAssist.Hint="{TemplateBinding wpf:HintAssist.Hint}"
                            wpf:HintAssist.HintOpacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                            wpf:HintAssist.IsFloating="{TemplateBinding wpf:HintAssist.IsFloating}"
                            wpf:TextFieldAssist.DecorationVisibility="{TemplateBinding wpf:TextFieldAssist.DecorationVisibility}"
                            wpf:TextFieldAssist.HasClearButton="{TemplateBinding wpf:TextFieldAssist.HasClearButton}"
                            wpf:TextFieldAssist.HasFilledTextField="{TemplateBinding wpf:TextFieldAssist.HasFilledTextField}"
                            wpf:TextFieldAssist.HasOutlinedTextField="{TemplateBinding wpf:TextFieldAssist.HasOutlinedTextField}"
                            wpf:TextFieldAssist.NewSpecHighlightingEnabled="{TemplateBinding wpf:TextFieldAssist.NewSpecHighlightingEnabled}"
                            wpf:TextFieldAssist.PrefixText="{TemplateBinding wpf:TextFieldAssist.PrefixText}"
                            wpf:TextFieldAssist.RippleOnFocusEnabled="{TemplateBinding wpf:TextFieldAssist.RippleOnFocusEnabled}"
                            wpf:TextFieldAssist.SuffixText="{TemplateBinding wpf:TextFieldAssist.SuffixText}"
                            wpf:TextFieldAssist.TextBoxViewMargin="{TemplateBinding wpf:TextFieldAssist.TextBoxViewMargin}"
                            wpf:TextFieldAssist.TextFieldCornerRadius="{TemplateBinding wpf:TextFieldAssist.TextFieldCornerRadius}"
                            wpf:TextFieldAssist.UnderlineBrush="{TemplateBinding wpf:TextFieldAssist.UnderlineBrush}"
                            wpf:TextFieldAssist.UnderlineCornerRadius="{TemplateBinding wpf:TextFieldAssist.UnderlineCornerRadius}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Focusable="{TemplateBinding Focusable}"
                            Style="{DynamicResource MaterialDesignDatePickerTextBox}">
                            <DatePickerTextBox.Padding>
                                <MultiBinding Converter="{StaticResource PickerInnerPaddingConverter}">
                                    <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding
                                        ElementName="PART_Button"
                                        Mode="OneWay"
                                        Path="ActualWidth" />
                                </MultiBinding>
                            </DatePickerTextBox.Padding>
                        </DatePickerTextBox>
                        <Button
                            x:Name="PART_Button"
                            Height="16"
                            Margin="{TemplateBinding Padding,
                                                     Converter={StaticResource PickerInnerPaddingConverter}}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Focusable="False"
                            Foreground="{TemplateBinding BorderBrush}"
                            Template="{StaticResource CalendarButtonTemplate}" />
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            CustomPopupPlacementCallback="{x:Static wpf:CustomPopupPlacementCallbackHelper.LargePopupCallback}"
                            Placement="Custom"
                            PlacementTarget="{Binding ElementName=PART_TextBox}"
                            PopupAnimation="Fade"
                            StaysOpen="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
                            <Setter Property="Padding" Value="16,8" />
                            <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}" />
                            <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMarginEmbedded}" />
                        </Trigger>
                        <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True">
                            <Setter Property="Padding" Value="16" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaBorder}" />
                            <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMarginEmbedded}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Button" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource PickerInnerPaddingConverter}">
                                        <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Button" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>
                        <Trigger Property="wpf:CalendarAssist.IsHeaderVisible" Value="False">
                            <Setter Property="CalendarStyle">
                                <Setter.Value>
                                    <Style BasedOn="{StaticResource MaterialDesignDatePickerCalendarPortrait}" TargetType="Calendar">
                                        <Setter Property="wpf:CalendarAssist.IsHeaderVisible" Value="False" />
                                    </Style>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
                        </MultiTrigger>

                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter TargetName="PART_TextBox" Property="wpf:ValidationAssist.HasError" Value="True" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="FloatingHintDatePicker"
        BasedOn="{StaticResource MaterialDesignDatePicker}"
        TargetType="{x:Type DatePicker}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
    </Style>

</ResourceDictionary>